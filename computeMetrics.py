from compress_pickle import load
import numpy as np
from functions import load_arrays_hdf5
from sparkFunctions import compute_comparison
import pandas as pd
import os


def main():

    HDF5_DIR = "H:\\Treatment Planning\\Elguindi\\storage"
    contourDatabase = "H:\\Treatment Planning\\Elguindi\\contourDatabase\\contourDB.xlsx"
    db = pd.read_excel(contourDatabase, index=False)

    filtered_db = db[db['SCAN_DATE'] > '2020-05-01']
    patientMRNs = filtered_db['MRN']
    toCompare = ['autoGenerated', 'mimLatest']

    comparisonMetrics = ['APL', 'TP volume', 'FN volume', 'FP volume', 'SEN', '%FP',
                         '3D DSC', '2D HD', '95% 2D HD', 'Ave 2D Dist', 'Median 2D Dist',
                         'Reference Centroid', 'Test Centroid', 'SDSC_1mm', 'SDSC_3mm',
                         'RobustHD_95', 'ref_vol', 'test_vol']

    for id in patientMRNs:
        rowVal = db.index[db['MRN'] == id].tolist()[0]

        # masterStructureList = "G:\\Projects\\mimTemplates\\StructureListMaster.xlsx"
        # structureList = pd.read_excel(masterStructureList)
        # sl = [x.upper() for x in structureList['StructureName'].to_list()]
        # sl.remove('EXTERNAL')

        sl = ['BRAINSTEM', 'PAROTID_L', 'PAROTID_R', 'SUBMAND_L', 'SUBMAND_R', 'MANDIBLE']

        print(rowVal)
        if rowVal >= 0:
            print(id)
            db = pd.read_excel(contourDatabase, index=False)
            data = db[db['MRN'] == id].dropna(axis=1)
            for col in data.columns:
                for s in sl:
                    if np.size(col.split('_')) > 1:
                        if (s == col.split('_')[0]) or (s == col.split('_')[0] + '_' + col.split('_')[1]):
                            scanData = load_arrays_hdf5(HDF5_DIR, data['SCAN_FILE'].iloc[0])
                            coordTransform = scanData['coordinateSystemTransform']
                            imageSize = scanData['imageSize']
                            sliceLocations = scanData['sliceLocations']
                            organname = s
                            sl.remove(s)
                            if organname + '_' + toCompare[1] in data:
                                ref = load(open(os.path.join(HDF5_DIR,
                                                             data[organname + '_' + toCompare[1]].iloc[0]), 'rb'),
                                           compression='gzip')
                            else:
                                ref = []

                            if organname + '_' + toCompare[0] in data:
                                test = load(open(os.path.join(HDF5_DIR,
                                                              data[organname + '_' + toCompare[0]].iloc[0]), 'rb'),
                                            compression='gzip')
                            else:
                                test = []
                            # Structure was contoured, no auto-generated
                            if ref and not test:
                                test = ref.copy()
                                for k in range(0, len(test)):
                                    test[k] = (test[k][0], [])
                            # Structure was auto-generated, but deleted
                            if test and not ref:
                                ref = test.copy()
                                for k in range(0, len(ref)):
                                    ref[k] = (ref[k][0], [])

                            if ref and test:
                                print('Computing metrics for organ: ' + organname)
                                scores, mask_ref, mask_test = compute_comparison(ref, test, imageSize,
                                                                                 sliceLocations, coordTransform)
                                results_structures = {}
                                k = 0
                                for metric in comparisonMetrics:
                                    metricName = organname + '_' + metric
                                    results_structures[metricName] = \
                                        str(scores[k]).strip('[').strip(']').strip().replace(' ',
                                                                                             '_').replace('___', '_')
                                    k = k + 1

                                dbRow = pd.Series(results_structures)
                                db.loc[rowVal, dbRow.index] = dbRow
            print('Finished Saving row: ' + str(rowVal))
            db.to_excel(contourDatabase, index=False)

    return


if __name__ == '__main__':
    main()
